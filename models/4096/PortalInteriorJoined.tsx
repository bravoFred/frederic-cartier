/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 ./public/models/src/portalInteriorJoined.glb --output models/4096/PortalInteriorJoined.tsx -r public/models4096 --transform -t --resolution 4096 --keepmaterials -m --keepmeshes --keepnames -s 
Files: ./public/models/src/portalInteriorJoined.glb [18.53MB] > models/4096/portalInteriorJoined-transformed.glb [96.93KB] (99%)
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'; import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    mesh: THREE.Mesh
  }
  materials: {
    white: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/../../models/4096/portalInteriorJoined-transformed.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh name="mesh" castShadow receiveShadow geometry={nodes.mesh.geometry} material={materials.white} position={[0, 3.581, 0]} userData={{ name: 'mesh' }} />
    </group>
  )
}

useGLTF.preload('/../../models/4096/portalInteriorJoined-transformed.glb')
