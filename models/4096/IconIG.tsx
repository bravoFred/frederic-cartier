/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/models/src/iconIG.glb --output models/4096/IconIG.tsx -r public/models4096 --transform -t --resolution 4096 --keepmaterials -m --keepmeshes --keepnames -s 
Files: ./public/models/src/iconIG.glb [8.33MB] > C:\Users\Tommy\Documents\GitHub\frederic-cartier\models\4096\models/4096/iconIG-transformed.glb [239.38KB] (97%)
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
	nodes: {
		ig_1: THREE.Mesh;
		ig_2: THREE.Mesh;
	};
	materials: {
		igWhite: THREE.MeshStandardMaterial;
	};
	// animations: GLTFAction[]
};

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>;
// no cors

const glbURL =
	'https://raw.githubusercontent.com/thomasmatlock/public/main/models/iconIG-transformed.glb';

import dynamic from 'next/dynamic';
// import from url
// import { useGLTF } from '@react-three/drei';
// import { GLTF } from 'three-stdlib';
export function Model(props: JSX.IntrinsicElements['group']) {
	// const { nodes, materials } = useGLTF('/../../models/4096/iconIG-transformed.glb') as GLTFResult;
	const { nodes, materials } = useGLTF(glbURL) as GLTFResult;
	return (
		<group {...props} dispose={null}>
			<group name="ig" userData={{ name: 'ig' }}>
				<mesh
					name="ig_1"
					castShadow
					receiveShadow
					geometry={nodes.ig_1.geometry}
					material={materials.igWhite}
				/>
				<mesh
					name="ig_2"
					castShadow
					receiveShadow
					geometry={nodes.ig_2.geometry}
					material={materials.igWhite}
				/>
			</group>
		</group>
	);
}

useGLTF.preload(glbURL);
